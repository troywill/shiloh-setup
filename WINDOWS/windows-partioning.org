#+STARTUP: showcontent
* Make backup
  #+BEGIN_SRC sh :tangle bin/make-backup.sh :shebang #!/bin/bash
    dd if=/dev/sda bs=4096 | gzip -c > sda.img.2012.08.31.dell.gz
  #+END_SRC
* Partition Drive
*** Friday, November 9
**** Decide to restore Dell
***** Where are backup images?
sda.img.2012.08.31.dell.gz, located on sdb1
#+begin_src sh
#!/bin/bash
dd if=/dev/sda conv=sync,noerror bs=64k | gzip -c > sda.img.2012.08.31.dell.gz
#+end_src
***** Procedure to restore ( [[https://wiki.archlinux.org/index.php/Disk_Cloning][Disk Cloning]] )
#+begin_src sh
gunzip -c /mnt/sda1/hda.img.gz | dd of=/dev/hda
#+end_src
***** How to resize the drive
***** Resizing the windows partition
- I installed ntfsprogs-2012.1.15-3
- Use ntfsreszie
***** Step by step
1. [X] cp mbr as a safety precaution
#+begin_src sh
dd if=/dev/sda of=mbr.sda.dell.laptop.nov.9.20M bs=1M count=20
#+end_src  
2. [ ] Boot external drive and restore hard drive
#+begin_src sh
# :tangle restore.sda.sh
# The following line was run on Friday, November 9.
gunzip --to-stdout sda.img.2012.08.31.dell.gz | dd of=/dev/sda bs=8M
#+end_src
1. [X] Resize hard drive in half
2. [X] Image resized ntfs partition
3. [X] Image mbr
****** How I resized the Windows Vista ntfs partition on November 9, 2012
I ran Arch Linux from an external hard drive. Then I installed ntfsprogs:       
#+begin_src sh
pacman --sync ntfsprogs
#+end_src
I used ntfsresize to resize the partiton to 50 GB.
#+begin_src sh
ntfsresize --size 50G /dev/sda1
#+end_src
- I used parted to shrink the partition table entry.
- I did that by first deleting both partitions and then used the rescue function searching from 1 to 50 GB
#+begin_src sh
rescue 1 50G
#+end_src
- Finally, I made the partition bootable.
Here's the partition table displayed by cfdisk after I got done:
#+begin_example
Partition Table for /dev/sda

         ---Starting----      ----Ending-----    Start     Number of
 # Flags Head Sect  Cyl   ID  Head Sect  Cyl     Sector    Sectors
-- ----- ---- ---- ----- ---- ---- ---- ----- ----------- -----------
 1  0x80   32   33     0 0x07  241   35  6078        2048    97656240
 2  0x00    0    0     0 0x00    0    0     0           0           0
 3  0x00    0    0     0 0x00    0    0     0           0           0
 4  0x00    0    0     0 0x00    0    0     0           0           0
#+end_example
And here's what fdisk -l showed:
#+begin_example
Disk /dev/sda: 120.0 GB, 120034123776 bytes
255 heads, 63 sectors/track, 14593 cylinders, total 234441648 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x30b7d696

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048    97658287    48828120    7  HPFS/NTFS/exFAT
#+end_example
****** How I backed up the the Windows Vista ntfs partition on November 9, 2012
The partition:       
#+begin_src sh
dd if=/dev/sda1 conv=sync,noerror bs=8M | gzip -c > windows-vista.sda1.img.post.resize.2012.11.09.dell.gz
#+end_src
The mbr:
#+begin_src sh
dd if=/dev/sda bs=1M count=20 of=mbr.sda.dell.laptop.nov.9.20M.post.resize
#+end_src
******* ntfsresize man page
NTFSRESIZE(8)                                                   NTFSRESIZE(8)
******** NAME
       ntfsresize - resize an NTFS filesystem without data loss

******** SYNOPSIS
       ntfsresize [OPTIONS] --info(-mb-only) DEVICE
       ntfsresize [OPTIONS] [--size SIZE[k|M|G]] DEVICE

******** DESCRIPTION
       The ntfsresize program safely resizes Windows XP, Windows Server 2003,
       Windows 2000, Windows NT4 and Longhorn NTFS filesystems  without  data
       loss.  All NTFS versions are supported, used by 32-bit and 64-bit Win-
       dows.  Defragmentation is NOT required prior to resizing  because  the
       program  can  relocate  any  data  if  needed,  without  risking  data
       integrity.

       Ntfsresize can be used  to  shrink  or  enlarge  any  NTFS  filesystem
       located  on  an  unmounted  DEVICE (usually a disk partition). The new
       filesystem will have SIZE bytes.  The SIZE parameter may have  one  of
       the  optional  modifiers  k,  M,  G, which means the SIZE parameter is
       given in kilo-, mega- or gigabytes respectively.  Ntfsresize  conforms
       to  the  SI,  ATA,  IEEE standards and the disk manufacturers by using
       k=10^3, M=10^6 and G=10^9.

       If both --info(-mb-only) and --size are omitted then the NTFS filesys-
       tem will be enlarged to the underlying DEVICE size.

       To  resize  a  filesystem  on  a  partition,  you must resize BOTH the
       filesystem and the partition by editing the  partition  table  on  the
       disk.  Similarly to other command line filesystem resizers, ntfsresize
       doesn't manipulate the size of the partitions, hence to  do  that  you
       must  use  a  disk  partitioning  tool  as well, for example fdisk(8).
       Alternatively you could use one of the many user friendly partitioners
       that  uses ntfsresize internally, like Mandriva's DiskDrake, QTParted,
       SUSE/Novell's YaST Partitioner, IBM's EVMS, GParted or Debian/Ubuntu's
       Partman.

       IMPORTANT!   It's a good practice making REGULAR BACKUPS of your valu-
       able data, especially before using ANY partitioning tools.  To  do  so
       for NTFS, you could use ntfsclone(8).  Don't forget to save the parti-
       tion table as well!

   Shrinkage
       If you wish to shrink an  NTFS  partition,  first  use  ntfsresize  to
       shrink  the  size  of  the  filesystem. Then you could use fdisk(8) to
       shrink the size of the partition by deleting the partition and  recre-
       ating  it  with  the  smaller size.  Do not make the partition smaller
       than the new size of NTFS otherwise you won't be able to boot. If  you
       did so notwithstanding then just recreate the partition to be as large
       as NTFS.

   Enlargement
       To enlarge an NTFS filesystem, first you must enlarge the size of  the
       underlying  partition. This can be done using fdisk(8) by deleting the
       partition and recreating it with a larger size.  Make sure it will not
       overlap  with  an  other  existing partition.  You may enlarge upwards
       (first sector unchanged) or downwards (last sector unchanged), but you
       may  not enlarge at both ends in a single step.  If you merge two NTFS
       partitions, only one of them can be expanded to the merged  partition.
       After  you  have  enlarged  the  partition,  you may use ntfsresize to
       enlarge the size of the filesystem.

   Partitioning
       When recreating the partition by a disk partitioning tool,  make  sure
       you  create it at the same starting sector and with the same partition
       type as before.  Otherwise you won't be able to access  your  filesys-
       tem.  Use  the 'u' fdisk command to switch to the reliable sector unit
       from the default cylinder one.

       Also make sure you set the bootable  flag  for  the  partition  if  it
       existed  before.  Failing  to do so you might not be able to boot your
       computer from the disk.

******** OPTIONS
       Below is a summary of all the options that ntfsresize accepts.  Nearly
       all  options have two equivalent names.  The short name is preceded by
       - and the long name is preceded by --.   Any  single  letter  options,
       that  don't  take  an argument, can be combined into a single command,
       e.g.  -fv is equivalent to -f -v.  Long named options can be  abbrevi-
       ated to any unique prefix of their name.

       -c, --check
              By  using  this option ntfsresize will only check the device to
              ensure that it is ready to be resized. If not,  it  will  print
              any  errors  detected.   If the device is fine, nothing will be
              printed.

       -i, --info
              By using this option without --expand, ntfsresize  will  deter-
              mine  the  theoretically smallest shrunken filesystem size sup-
              ported.  Most of the time the result is the space already  used
              on  the  filesystem.  Ntfsresize  will  refuse  shrinking  to a
              smaller size than what you got by this option and depending  on
              several factors it might be unable to shrink very close to this
              theoretical size. Although the integrity of your data should be
              never  in  risk, it's still strongly recommended to make a test
              run by using the --no-action option before real resizing.

              Practically the smallest shrunken size generally is  at  around
              "used  space" + (20-200 MB). Please also take into account that
              Windows might need about 50-100 MB  free  space  left  to  boot
              safely.

              If  used  in  association with option --expand, ntfsresize will
              determine the smallest downwards expansion size and the  possi-
              ble  increments  to the size. These are exact byte counts which
              must not be rounded.  This option may be used after the  parti-
              tion  has  been  expanded provided the upper bound has not been
              changed.

              This option never causes any changes  to  the  filesystem,  the
              partition is opened read-only.

       -m, --info-mb-only
              Like the info option, only print out the shrinkable size in MB.
              Print nothing if the shrink size is the same  as  the  original
              size  (in  MB).  This option cannot be used in association with
              option --expand.

       -s, --size SIZE[k|M|G]
              Resize filesystem to SIZE[k|M|G] bytes by shifting its end  and
              keeping  its beginning unchanged.  The optional modifiers k, M,
              G mean the SIZE parameter is given in kilo-, mega- or gigabytes
              respectively.   Conforming  to  standards,  k=10^3,  M=10^6 and
              G=10^9. Use this option with --no-action first.

       -x, --expand
              Expand the filesystem to the current partition  size,  shifting
              down  its beginning and keeping its end unchanged. The metadata
              is recreated in the expanded space and no user  data  is  relo-
              cated.  This is incompatible with option -s (or --size) and can
              only be made if the expanded space is an exact multiple of  the
              cluster  size.  It  must  also  be large enough to hold the new
              metadata.

              If the expansion is interrupted for some reason (power  outage,
              etc),  you  may  restart the resizing, as the original data and
              metadata have been kept unchanged.

              Note : expanding a  Windows  system  partition  and  filesystem
              downwards  may  lead to the registry or some files not matching
              the new system layout, or to some important files being located
              too  far  from the beginning of the partition, thus making Win-
              dows not bootable.

       -f, --force
              Forces ntfsresize to proceed with the resize  operation  either
              without  prompting  for  an  explicit  acceptance,  or  if  the
              filesystem is marked for consistency check. Double  the  option
              (-ff, --force --force) to avoid prompting even if the file sys-
              tem is marked for check.

              Please note, ntfsresize always marks the filesystem for consis-
              tency  check  before a real resize operation and it leaves that
              way for extra safety. Thus if NTFS  was  marked  by  ntfsresize
              then  it's  safe to use this option. If you need to resize sev-
              eral times without booting into Windows between  each  resizing
              steps then you must use this option.

       -n, --no-action
              Use this option to make a test run before doing the real resize
              operation.  Volume will be opened read-only and ntfsresize dis-
              plays  what  it  would  do if it were to resize the filesystem.
              Continue with the real resizing only if the test run passed.

       -b, --bad-sectors
              Support disks having hardware errors, bad  sectors  with  those
              ntfsresize would refuse to work by default.

              Prior  using  this  option, it's strongly recommended to make a
              backup by ntfsclone(8) using the --rescue option, then  running
              'chkdsk /f /r volume:' on Windows from the command line. If the
              disk guarantee is still valid then replace it.  It's  defected.
              Please  also  note,  that  no software can repair these type of
              hardware errors. The most what they can do is  to  work  around
              the permanent defects.

              This option doesn't have any effect if the disk is flawless.

       -P, --no-progress-bar
              Don't show progress bars.

       -v, --verbose
              More output.

       -V, --version
              Print the version number of ntfsresize and exit.

       -h, --help
              Display help and exit.

******** EXIT CODES
       The exit code is 0 on success, non-zero otherwise.

******** KNOWN ISSUES
       No reliability problem is known. If you need help please try the Ntfs-
       resize FAQ first (see below) and if you don't find  your  answer  then
       send your question, comment or bug report to the development team:
       ntfs-3g-devel@lists.sf.net

       There  are  a few very rarely met restrictions at present: filesystems
       having unknown bad sectors, relocation of the first MFT extent and re-
       sizing  into  the  middle  of  a $MFTMirr extent aren't supported yet.
       These cases are detected and resizing is restricted to a safe size  or
       the closest safe size is displayed.

       Ntfsresize  schedules  an  NTFS  consistency check and after the first
       boot into Windows you must see chkdsk running on  a  blue  background.
       This  is intentional and no need to worry about it.  Windows may force
       a quick reboot after the consistency check.  Moreover  after  reparti-
       tioning  your  disk  and  depending on the hardware configuration, the
       Windows message System Settings Change may also appear. Just  acknowl-
       edge it and reboot again.

       The disk geometry handling semantic (HDIO_GETGEO ioctl) has changed in
       an incompatible way in Linux 2.6 kernels and this triggered multitudi-
       nous  partition table corruptions resulting in unbootable Windows sys-
       tems, even if NTFS was consistent, if parted(8) was involved  in  some
       way.  This problem was often attributed to ntfsresize but in fact it's
       completely independent of NTFS thus  ntfsresize.  Moreover  ntfsresize
       never touches the partition table at all. By changing the 'Disk Access
       Mode' to LBA in the BIOS makes booting work again, most of  the  time.
       You  can find more information about this issue in the Troubleshooting
       section of the below referred Ntfsresize FAQ.

******** AUTHORS
       ntfsresize was written by Szabolcs Szakacsits, with contributions from
       Anton  Altaparmakov  and  Richard Russon.  It was ported to ntfs-3g by
       Erik Larsson and Jean-Pierre Andre.

******** ACKNOWLEDGEMENT
       Many thanks to Anton Altaparmakov and Richard Russon for libntfs,  the
       excellent  documentation  and  comments, to Gergely Madarasz, Dewey M.
       Sasser and Miguel Lastra and  his  colleagues  at  the  University  of
       Granada  for their continuous and highly valuable help, furthermore to
       Erik Meade, Martin Fick, Sandro  Hawke,  Dave  Croal,  Lorrin  Nelson,
       Geert  Hendrickx, Robert Bjorkman and Richard Burdick for beta testing
       the relocation support, to  Florian  Eyben,  Fritz  Oppliger,  Richard
       Ebling,  Sid-Ahmed Touati, Jan Kiszka, Benjamin Redelings, Christopher
       Haney, Ryan Durk, Ralf Beyer, Scott Hansen, Alan Evans for the  valued
       contributions  and to Theodore Ts'o whose resize2fs(8) man page origi-
       nally formed the basis of this page.

******** AVAILABILITY
       ntfsresize is part of the ntfs-3g package and is available from:
       http://www.tuxera.com/community/

       Ntfsresize related news, example of usage, troubleshooting, statically
       linked binary and FAQ (frequently asked questions) are maintained at:
       http://mlf.linux.rulez.org/mlf/ezaz/ntfsresize.html

******** SEE ALSO
       fdisk(8),  cfdisk(8),  sfdisk(8),  parted(8),  evms(8),  ntfsclone(8),
       mkntfs(8), ntfsprogs(8)

ntfs-3g 2012.1.15               February 2006                   NTFSRESIZE(8)

*** Sunday, November 11
**** Grub experiment - Find out what grub install does to the space between the master boot record and the first partion.
***** This is what fdisk -l /dev/sdb displays
#+begin_example
Disk /dev/sdb: 7948 MB, 7948206080 bytes, 15523840 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            8192    15523839     7757824    b  W95 FAT32
#+end_example
There is unused space between the master boot record (mbr) and the beginning of the partion

***** Zero the drive
#+begin_src sh
dd if=/dev/zero bs=1M count=20 of=/dev/sdb
#+end_src

***** Make a primary partition with parted
#+begin_example
(parted) mkpart p ext4 0G -1s
#+end_example
parted (apparently) aligns the first partition at sector 2048
***** dd the free space
#+begin_src sh
dd if=/dev/sdb bs=512 skip=1 count=2047 of=/tmp/free
#+end_src

***** Now, format the drive
#+begin_src sh
mkfs.ext2 -L shiloh-flash /dev/sdb1
#+end_src
***** And, now, grub-install
