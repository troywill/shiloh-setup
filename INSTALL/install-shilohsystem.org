* Installing Shiloh System step by step
1. [X] Connect to the internet
2. [X] Read the wiki.archlinux.org [[https://wiki.archlinux.org/index.php/Beginners'_Guide][Beginner's Guide]]
3. [-] Prepare the target media with parted and GPT
   1. [X] (Optional) Run lsblk to determine drive
      #+BEGIN_SRC sh
        lsblk > lsblk
        cat lsblk
      #+END_SRC
   2. [X] (Optional) Zero drive
      #+BEGIN_SRC sh :tangle bin/partition/zero-the-drive.sh :shebang #!/bin/bash
	set -o errexit
	DEVICE="/dev/XXXX" # find DEVICE with /usr/bin/lsblk and edit this line
        exit
	BS="1M"
	COUNT=4
	dd if=${DEVICE} of=SECTOR bs=$BS count=$COUNT
	dd if=/dev/zero of=${DEVICE} bs=$BS count=$COUNT
      #+END_SRC
   3. [X] Create a GUID partition table with parted
      #+BEGIN_SRC sh
	parted /dev/XXXX
	mklabel gpt
      #+END_SRC
   4. [X] Create a boot partition with parted
      #+BEGIN_SRC sh
        mkpart primary 1 2
        set 1 bios_grub on
      #+END_SRC
   5. [X] Create a root partition with parted
      #+BEGIN_SRC sh
	mkpart primary 2 8011
      #+END_SRC
   6. [X] Verify partition
      #+BEGIN_SRC sh
	print
      #+END_SRC
   7. [ ] Format the root partition
      #+BEGIN_SRC sh :tangle bin/partition/format-the-partion.sh :shebang #!/bin/bash
	set -o nounset
	set -o errexit
	LABEL="20140611" #change this!
	DEVICE="/dev/XXXX" #change this!
	mkfs.ext4 -v -L $LABEL $DEVICE
      #+END_SRC
4. [ ] Mount the partition
   #+begin_src sh :tangle bin/partition/mount-the-partition.sh :shebang #!/bin/bash
    set -o errexit
    set -o nounset
    DEVICE="/dev/sdb2" #change this!
    mount --verbose $DEVICE /mnt
   #+end_src
5. [ ] Install the base system
   1. [ ] Install arch-install-scripts
      #+begin_src sh
	sudo pacman --sync arch-install-scripts
      #+end_src
   2. [ ] (Optional) Copy xz files or link symbolically to host pkg directory
      #+begin_src sh :tangle bin/optional/copy-existing-pkg-cache :shebang #!/bin/bash
	set -o nounset
	set -o errexit
	sudo mkdir --verbose --parent /mnt/var/cache/pacman/pkg
	sudo rsync --archive --verbose /var/cache/pacman/pkg/* /mnt/var/cache/pacman/pkg
      #+end_src
      #+begin_src sh :tangle bin/optional/link-existing-pkg-cache :shebang #!/bin/bash
	set -o nounset
	set -o errexit
	cd /mnt
	mkdir --verbose --parent var/cache/pacman
	cd var/cache/pacman
	ln --symbolic --verbose /var/cache/pacman/pkg
      #+end_src
   3. [ ] Install packages with pacstap
      Before installing, you may want to edit /etc/pacman.d/mirrorlist such that your
      preferred mirror is first. This copy of the mirrorlist will be installed on your
      new system by pacstrap} as well, so it's worth getting it right.
      
      Using the pacstrap script we install the base system. The 'base-devel' package group
      should also be installed if you plan on compiling software from the [[AUR]] or using [[ABS]].
      
      Other packages can be installed by appending their names to the above command (space
      seperated), including the bootloader if you want.
      
      #+BEGIN_SRC sh :tangle bin/pacstrap-tdw-full.sh :shebang #!/bin/bash
	set -o errexit
	set -o nounset
	# Thursday, April 25, 2013 3:09 PM
	# INSTALL="grub-bios os-prober arch-install-scripts parted linux-lts"
	INSTALL="grub-bios os-prober arch-install-scripts parted linux-lts"
	DEVEL="base-devel git stow cmake"
	SYSTEM="ntp openssh rsync screen sudo wget pkgfile abs"
	EMACS="emacs"
	TEX="texlive-core texlive-latexextra"
	WIRELESS="wireless_tools wpa_supplicant"
	XORG="xorg-server xorg-xinit xf86-video-intel xf86-input-synaptics"
	XORG_FONTS="ttf-dejavu ttf-hannom"
	WEB="chromium firefox opera"
	KDE="kdebase-konsole kdegraphics-gwenview kdebase-konqueror kdeedu-kstars"
	LXQT="openbox"
	AUDIO="alsa-utils pulseaudio-alsa pavucontrol"
	VIDEO="flashplugin youtube-dl smplayer"
	pacstrap /mnt base $INSTALL $DEVEL $SYSTEM $EMACS $WIRELESS $XORG $WEB $KDE $LXQT $AUDIO $VIDEO $XORG_FONTS
      #+END_SRC  
   4. [ ] (Optional) Remove symbolic link, and restore pacman pkg directory
      #+begin_src sh :tangle bin/optional/remove-link-to-pkg-cache-remove :shebang #!/bin/bash
	set -o nounset
	set -o errexit
	cd /mnt/var/cache/pacman
	unlink pkg
	mkdir --verbose pkg
	ls -ld /mnt/var/cache/pacman/pkg
      #+end_src
   5. [ ] (Optional) Copy AUR packages
6. [ ]  Configure the system
   1. [ ] Generate an [[fstab]]
      #+BEGIN_SRC sh :tangle bin/configure/fstab.sh :shebang #!/bin/bash
        set -o verbose
        # if you prefer to use UUIDs or labels,
        # add the -U or -L option
        genfstab -pU /mnt >> /mnt/etc/fstab
      #+END_SRC
   2. [ ] copy shiloh-setup to new root directory
      #+BEGIN_SRC sh
          sudo cp --archive shiloh-setup/ /mnt/root
      #+END_SRC
   3. [ ] chroot into our newly installed system
      #+BEGIN_SRC sh
        arch-chroot /mnt
      #+END_SRC
   4. [ ] Write your hostname to /etc/hostname.
      #+BEGIN_SRC sh :tangle bin/configure/hostname.sh :shebang #!/bin/bash
        set -o nounset
        HOSTNAME="kangaroo" # change this!
        echo $HOSTNAME > /etc/hostname
      #+END_SRC
   5. [ ] Symlink /etc/localtime to /usr/share/zoneinfo/Zone/SubZone.
      - Replace Zone and Subzone to your liking. For Los_Angeles:
        #+BEGIN_SRC sh :tangle bin/configure/timezone.sh :shebang #!/bin/bash
          ln -s /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
          ls -l /etc/localtime
        #+END_SRC   
   6. [ ] Set [[https://wiki.archlinux.org/index.php/Locale#Setting_system-wide_locale][locale]] preferences in /etc/locale.conf
      #+BEGIN_SRC sh :tangle bin/configure/locale.sh :shebang #!/bin/bash
        set -o verbose
        cat /etc/locale.conf
        echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
        cat /etc/locale.conf
      #+END_SRC
   7. [ ] Uncomment en_US.UTF-8 in /etc/locale.gen
      #+begin_src perl :tangle bin/configure/locale-gen.pl :shebang #!/usr/bin/env perl
        use warnings;
        use strict;
        my $regexp = '^#en_US.UTF-8 UTF-8';
        my $replacement = 'en_US.UTF-8 UTF-8';
        open(my $oldlocale, "<", "/etc/locale.gen")      # open for update
            or die "Can't open '/etc/locale.gen' for reading: $!";
        open(my $newlocale, ">", "/etc/locale.gen.tmp")
            or die "Can't open '/tmp/locale.gen' for writing: $!";
        while (<$oldlocale>) {
            s/$regexp/$replacement/;
            print $newlocale $_ or die "can't write $newlocale: $!";;
        }
        
        close($oldlocale)            or die "can't close $oldlocale: $!";
        close($newlocale)            or die "can't close $newlocale: $!";
        rename("/etc/locale.gen", "/etc/locale.gen.orig")   or die "can't rename /etc/locale.gen /etc/locale.gen.orig: $!";
        rename("/etc/locale.gen.tmp", "/etc/locale.gen") or die "can't rename /etc/locale.gen.tmp /etc/locale.gen: $!";
      #+end_src
   8. [ ] locale-gen
       #+BEGIN_SRC sh
         locale-gen
       #+END_SRC
   9. [ ] Add [[https://wiki.archlinux.org/index.php/KEYMAP][console keymap and font]] preferences in /etc/vconsole.conf
      #+BEGIN_SRC sh :tangle bin/configure/vconsole.sh :shebang #!/bin/bash
        echo KEYMAP=us > /etc/vconsole.conf
      #+END_SRC
   10. [ ] Configure /etc/mkinitcpio.conf as needed (see [[mkinitcpio]]) and create an initial RAM disk
       #+BEGIN_SRC sh :tangle bin/configure/mkinitcpio.sh :shebang #!/bin/bash
         mkinitcpio -p linux
       #+END_SRC
7. [ ] Configure the bootloader: refer back to the appropriate article from the bootloader installation section.
   1. [ ] READ https://wiki.archlinux.org/index.php/GRUB2
   2. [ ] (Optional) Install osprober if Windows dual boot
      #+begin_src sh
	pacman --sync os-prober
      #+end_src
   3. [ ] run grub-install to cp grub boot files and optionally install to 440-byte MBR boot code region
      #+BEGIN_SRC sh :tangle bin/configure/grub-install.sh :shebang #!/bin/bash
	DEVICE=/dev/sdb #change this as desired!
	modprobe dm-mod
	sleep 1
	grub-install --target=i386-pc --recheck --debug $DEVICE
	cp --verbose /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
      #+END_SRC
   4. NOTE!
      + /usr/sbin/grub-bios-setup: warning: this GPT partition label contains no BIOS Boot Partition
	; embedding won't be possible.
      + /usr/sbin/grub-bios-setup: warning: Embedding is not possible.  GRUB can only be installed in
	this setup by using blocklists.  However, blocklists are UNRELIABLE and their use is discouraged..
   5. [ ] Generate GRUB2 BIOS Config file
      #+BEGIN_SRC sh :tangle bin/configure/grub-cfg.sh :shebang #!/bin/bash
	grub-mkconfig -o /boot/grub/grub.cfg
      #+END_SRC
8. [ ] Set a root password with passwd.
9. [ ] Add a user
   #+BEGIN_SRC sh :tangle bin/configure/adduser.sh :shebang #!/bin/bash
     useradd -m -g users -s /bin/bash troy
     passwd troy
   #+END_SRC   
10. [ ] Setup sudo
    #+BEGIN_SRC perl :tangle bin/configure/sudo.pl :shebang #!/usr/bin/env perl
      use warnings;
      use strict;
      
      print "User? ";
      chomp(my $user = <STDIN>);
      
      open ( my $out, '>>', '/etc/sudoers' );
      print $out <<"END";
      ### Following lines added by sudo.pl
      # Defaults specification
      Defaults:troy timestamp_timeout=-1
      Defaults !tty_tickets
      # User privilege specification
      root    ALL=(ALL) ALL
      $user   ALL=(ALL) ALL
      END
      
      sub run_command {
          my $command = shift;
          print "=> $command\n";
          system $command;
      }
    #+END_SRC
11. [ ] Unmount and reboot
    If you are still in the chroot environment type exit or press Ctrl+D in order to exit.
    Earlier we mounted the partitions under /mnt. In this step we will unmount them:
    #+BEGIN_SRC sh
      umount /mnt/{boot,home,}
    #+END_SRC
    Now reboot and then login into the new system with the root account.

    
** TODO Configure pacman
Edit /etc/pacman.conf and configure pacman's options, also enabling the repositories you need.

See [[Pacman]] and [[Official Repositories]] for details.

== Update the system ==
At this point you should update your system.

See [[Pacman#Upgrading packages|Upgrading packages]] for instructions.

== Add a user ==
Finally, add a normal user as described in [[Users and Groups#User management|User management]].

Your new Arch Linux base system is now a functional GNU/Linux environment: you can proceed to [[Beginners' Guide/Extra]] for customization suggestions.
* Disk partioning documentation
* Bootloader documentation
* Networking
** wpa
#+BEGIN_SRC sh :tangle NETWORKING/generate-wpa-config.sh :shebang #!/bin/bash
set -o errexit
set -o nounset
SSID="my_ssid"
PASSPHRASE="my_passphrase"

wpa_passphrase $SSID $PASSPHRASE >> wpa_supplicant.conf
#+END_SRC
#+BEGIN_SRC sh :tangle NETWORKING/wpa_supplicant.sh :shebang #!/bin/bash 
set -o nounset
INTERFACE='wlp1s0'
sudo wpa_supplicant -B -i${INTERFACE} -c ./wpa_supplicant.conf 
sudo dhcpcd ${INTERFACE}
#+END_SRC
